import re

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram_admin import config
from aiogram_admin.callback_data.base_callback import ChatCallback, Action


def admin_start():
    keywords = [
        ("üìÑ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è  –ø–æ–¥–ø–∏—Å–∫–∏", ChatCallback(action=Action.all)),
        ("‚úç –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", ChatCallback(action=Action.create)),
        ("üìà –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", "statistics"),
        ("üîñ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "send_mail"),
        ("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", "bot_settings"),
        ("üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "export_users"),
    ]
    builder = InlineKeyboardBuilder()

    for text, callback_data in keywords:
        builder.button(text=text, callback_data=callback_data)

    builder.adjust(1)
    return builder.as_markup()


def admin_button() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=config.ADMIN_COMMAND)
    return builder.as_markup()


def back() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=config.ADMIN_COMMAND)
    return builder.as_markup()


def export_users_send_type() -> InlineKeyboardMarkup:
    keywords = [
        ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º", "text"),
        ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "txt"),
        ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å json-file", "json"),
    ]
    builder = InlineKeyboardBuilder()

    for text, callback_data in keywords:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=config.ADMIN_COMMAND)
    builder.adjust(1)
    return builder.as_markup()


def send_mail_preview() -> InlineKeyboardMarkup:
    keywords = [
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å url –∫–Ω–æ–ø–∫–∏", "add_button"),
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "accept"),
    ]
    builder = InlineKeyboardBuilder()
    for text, callback_data in keywords:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=config.ADMIN_COMMAND)
    builder.adjust(1)
    return builder.as_markup()


def send_mail_done(status: bool = True) -> InlineKeyboardMarkup:
    keywords = [
        ("‚è∏ –ü–∞—É–∑–∞", "pause_mail") if status else ("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", "continue_mail"),
        ("‚èπ –°—Ç–æ–ø", "stop_mail")
    ]
    builder = InlineKeyboardBuilder()

    for text, callback_data in keywords:
        builder.button(text=text, callback_data=callback_data)

    return builder.as_markup()


def parse_buttons(text: str):
    keywords = []
    change_keyboard = re.split(r'(?<=\w\n)', text)
    for but_parent in change_keyboard:
        keywords.append(
            list(map(lambda x: list(map(lambda y: y.strip(), x.split('-'))), but_parent.split("|\n")))
        )
    return keywords


def send_mail_add_button(text: str) -> InlineKeyboardMarkup:
    keywords = [
        # ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ url –∫–Ω–æ–ø–∫–∏", "add_button"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π url –∫–Ω–æ–ø–∫–∏", "add_button"),
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "accept"),
        ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel"),
    ]
    builder = InlineKeyboardBuilder()
    for _text, callback_data in keywords:
        builder.button(text=_text, callback_data=callback_data)

    parsed_buttons_group: list[list[list]] = parse_buttons(text)
    for buttons in parsed_buttons_group:
        for _text, callback_data in buttons:
            builder.button(text=_text, callback_data=callback_data)
    builder.adjust(1)
    return builder.as_markup()


def send_mail_add_button_save_keyboard(text: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    parsed_buttons_group: list[list[list]] = parse_buttons(text)
    for buttons in parsed_buttons_group:
        for _text, callback_data in buttons:
            builder.button(text=_text, callback_data=callback_data)
    builder.adjust(1)
    return builder.as_markup()


def send_mail_add_button_in_current(markup: InlineKeyboardMarkup) -> InlineKeyboardMarkup:
    keywords = [
        # ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ url –∫–Ω–æ–ø–∫–∏", "add_button"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π url –∫–Ω–æ–ø–∫–∏", "add_button"),
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "accept"),
        ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel"),
    ]
    builder = InlineKeyboardBuilder()
    for _text, callback_data in keywords:
        builder.button(text=_text, callback_data=callback_data)
    new_markup = builder.as_markup()
    copy_markup = markup.copy()
    copy_markup.inline_keyboard.extend(new_markup.inline_keyboard)
    builder.adjust(1)
    return copy_markup


if __name__ == '__main__':
    texts = ("–ö–Ω–æ–ø–∫–∞ 1 - https://www.example1.com\n"
             "–ö–Ω–æ–ø–∫–∞ 2 - https://www.example2.com\n"
             "–ö–Ω–æ–ø–∫–∞ 3 - https://www.example3.com\n"
             "–ö–Ω–æ–ø–∫–∞ 4 - https://www.example4.com")
    # pprint(send_mail_preview().inline_keyboard)
    print(*parse_buttons(texts))
    # print(parse_buttons(text))
    # print(send_mail_add_button(text))
    # parse_buttons("–ö–Ω–æ–ø–∫–∞ 1 - https://www.example1.com,\n"
    #               "–ö–Ω–æ–ø–∫–∞ 2 - https://www.example2.com,\n"
    #               "–ö–Ω–æ–ø–∫–∞ 3 - https://www.example3.com|\n"
    #               "–ö–Ω–æ–ø–∫–∞ 4 - https://www.example4.com\n")
